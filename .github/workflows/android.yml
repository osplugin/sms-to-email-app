name: Android Sign and Release

on:
  release:
    types: [published]

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Extract version from tag
        id: extract-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Setup signing environment
        id: setup-signing
        env:
          STORE_FILE: ${{ github.workspace }}/keystore.jks
          STORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          # 确保在工作空间根目录操作
          cd $GITHUB_WORKSPACE
          
          # 解码并保存密钥库文件
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > $STORE_FILE
          chmod 600 $STORE_FILE
          
          # 验证文件
          if [ ! -f "$STORE_FILE" ]; then
            echo "❌ Keystore file not created!"
            exit 1
          fi
          
          echo "Keystore info:"
          ls -la $STORE_FILE
          echo "store_file=$STORE_FILE" >> $GITHUB_OUTPUT

      - name: Build signed APK
        env:
          STORE_FILE: ${{ steps.setup-signing.outputs.store_file }}
          STORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          # 打印调试信息
          echo "Building with keystore at: $STORE_FILE"
          ls -la $STORE_FILE || echo "Keystore not found"
          
          ./gradlew assembleRelease --stacktrace

      - name: Verify APK
        id: verify-apk
        run: |
          # 查找签名APK（排除未签名和对齐的临时文件）
          APK_PATH=$(find app/build/outputs/apk/ -name "*.apk" ! -name "*unsigned*" ! -name "*unaligned*" | head -n 1)
          
          if [ -z "$APK_PATH" ]; then
            echo "Available APKs:"
            find app/build/outputs/apk/ -name "*.apk" || echo "No APKs found"
            exit 1
          fi
          
          echo "Found signed APK at: $APK_PATH"
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT

          # 验证签名（可选）
          if ! apksigner verify --print-certs "$APK_PATH"; then
            echo "❌ APK not properly signed!"
            exit 1
          fi

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.verify-apk.outputs.apk_path }}
          asset_name: sms-to-email-app-${{ steps.extract-version.outputs.version }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Clean up
        if: always()
        run: |
          if [ -f "keystore.jks" ]; then
            shred -u keystore.jks
            echo "Keystore securely removed"
          fi
          rm -f gradle.properties