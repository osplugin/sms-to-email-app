name: Android Release Build

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'jdk11'
        java-version: '11'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Make gradlew executable
      run: chmod +x gradlew
      
    - name: Extract version from release tag
      id: extract-version
      run: |
        # 从release标签中提取版本号
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
    - name: Update versionName in build.gradle
      run: |
        # 更新versionName
        sed -i "s/versionName \".*\"/versionName \"${{ steps.extract-version.outputs.version }}\"/" app/build.gradle
        # 验证修改
        echo "Updated build.gradle versionName:"
        grep versionName app/build.gradle
        
    - name: Get project name
      id: project-name
      run: |
        # 获取GitHub仓库名（去掉用户名前缀）
        REPO_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F'/' '{print $2}')
        # 或者从build.gradle获取应用名（选择一种方式）
        # APP_NAME=$(grep -oP 'applicationId "\K[^"]+' app/build.gradle | awk -F'.' '{print $NF}')
        echo "name=$REPO_NAME" >> $GITHUB_OUTPUT
        echo "Using project name: $REPO_NAME"
        
    - name: Setup signing
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.jks
        chmod 600 keystore.jks
        echo "storeFile=keystore.jks" >> gradle.properties
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> gradle.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> gradle.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> gradle.properties
        
    - name: Build signed APK
      run: |
        ./gradlew assembleRelease
        
    - name: Upload APK to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: app/build/outputs/apk/release/app-release.apk
        asset_name: ${{ steps.project-name.outputs.name }}-${{ steps.extract-version.outputs.version }}.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Clean up
      if: always()
      run: |
        rm -f keystore.jks
        rm -f gradle.properties
